name: Tests HTML & Junit Reporter Daily
on:
  schedule:
    - cron: "30 5 * * *" # Execute every day at 5:30 AM (UTC)
jobs:
  test:
    timeout-minutes: 60
    name: Run Test
    runs-on: ubuntu-latest
    env:
      BASE_URL: ${{vars.BASE_URL}}
      CONTOSO_URL: ${{vars.CONTOSO_URL}}
      CONTOSO_API_URL: ${{vars.CONTOSO_API_URL}}
      LOCALE: ${{vars.LOCALE}}
      USER_NAME: ${{secrets.USER_NAME}}
      PASSWORD: ${{secrets.PASSWORD}}
      LT_USERNAME: ${{secrets.LT_USERNAME}}
      LT_ACCESS_KEY: ${{secrets.LT_ACCESS_KEY}}
      EFFIZIENTE_API_URL: ${{vars.EFFIZIENTE_API_URL}}
      EFFIZIENTE_URL: ${{vars.EFFIZIENTE_URL}}
      EFFIZIENTE_COMPANY: ${{secrets.EFFIZIENTE_COMPANY}}
      EFFIZIENTE_NORMAL_USER: ${{secrets.EFFIZIENTE_NORMAL_USER}}
      EFFIZIENTE_NORMAL_PASSWORD: ${{secrets.EFFIZIENTE_NORMAL_PASSWORD}}
      EFFIZIENTE_ADMIN_USER: ${{secrets.EFFIZIENTE_ADMIN_USER}}
      EFFIZIENTE_ADMIN_PASSWORD: ${{secrets.EFFIZIENTE_ADMIN_PASSWORD}}
      ZEROSTEP_TOKEN: ${{secrets.ZEROSTEP_TOKEN}}
      PLAYWRIGHT_SERVICE_ACCESS_TOKEN: ${{ secrets.PLAYWRIGHT_SERVICE_ACCESS_TOKEN }}
      PLAYWRIGHT_SERVICE_URL: ${{ secrets.PLAYWRIGHT_SERVICE_URL }}
      PLAYWRIGHT_SERVICE_RUN_ID: ${{ github.run_id }}-${{ github.run_attempt }}-${{ github.sha }}
      WEBDRIVERIO_SHOP: ${{vars.WEBDRIVERIO_SHOP}}
      ADO_TOKEN: ${{ secrets.ADO_TOKEN}}
      ADO_ORGANIZATION: ${{vars.ADO_ORGANIZATION}}
      ADO_PROJECT: ${{vars.ADO_PROJECT}}
      ADO_PLAN_ID: ${{vars.ADO_PLAN_ID}}
      TEST_OWNER: ${{vars.TEST_OWNER}}
      ADO_CONFIG_IDS: ${{vars.ADO_CONFIG_IDS}}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4

      # for playwright reporting service beta is needed the npm config
      - name: Install dependencies
        run: |
          npm ci

      - name: Install playwright browsers
        run: npx playwright install --with-deps

      - name: Run playwright tests
        run: PLAYWRIGHT_HTML_REPORT=report PLAYWRIGHT_JUNIT_OUTPUT_NAME=report/results.xml npx playwright test tests/AI tests/Api tests/Basic tests/Excel tests/Fixture-LambdaTest tests/LocaleGeo tests/Synthetic tests/VisualTesting --reporter=html,junit,./utils/reporter/StepReporter.ts

      - name: Upload html report as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: report/
          retention-days: 5

      - name: Upload html steps as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: steps-report
          path: steps-report/
          retention-days: 5

      - name: Publish HTML reporter to Github Pages
        uses: peaceiris/actions-gh-pages@v4
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ github.workspace }}/report/

      - name: Upload xml junit result as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: java-junit
          path: ${{ github.workspace }}/report/results.xml

      - name: Generate Junit Report in Github
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Junit Tests # Name of the check run which will be created
          path: ${{ github.workspace }}/report/*.xml # Path to test results
          reporter: java-junit # Format of test results
