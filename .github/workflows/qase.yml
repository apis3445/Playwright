name: Run tests from QASE

on:
  workflow_dispatch:
    inputs:
      qase_api_base_url:
        description: "Qase API URL"
        required: true
      qase_report:
        description: "Enabled/disabled reporting to Qase"
        required: true
      qase_project_code:
        description: "Qase project code"
        required: true
      qase_run_id:
        description: "Qase Run ID"
        required: true
      qase_run_complete:
        description: "Complete Qase Run"
        required: true

env:
  QASE_API_BASE_URL: ${{ inputs.qase_api_base_url }}
  QASE_REPORT: ${{ inputs.qase_report }}
  QASE_PROJECT_CODE: ${{ inputs.qase_project_code }}
  QASE_RUN_ID: ${{ inputs.qase_run_id }}
  QASE_RUN_COMPLETE: ${{ inputs.qase_run_complete }}
  QASE_API_TOKEN: ${{ secrets.QASE_TOKEN }}
  BASE_URL: ${{vars.BASE_URL}}
  CONTOSO_URL: ${{vars.CONTOSO_URL}}
  CONTOSO_API_URL: ${{vars.CONTOSO_API_URL}}
  LOCALE: ${{vars.LOCALE}}
  USER_NAME: ${{secrets.USER_NAME}}
  PASSWORD: ${{secrets.PASSWORD}}
  EFFIZIENTE_API_URL: ${{vars.EFFIZIENTE_API_URL}}
  EFFIZIENTE_URL: ${{vars.EFFIZIENTE_URL}}
  EFFIZIENTE_COMPANY: ${{secrets.EFFIZIENTE_COMPANY}}
  EFFIZIENTE_NORMAL_USER: ${{secrets.EFFIZIENTE_NORMAL_USER}}
  EFFIZIENTE_NORMAL_PASSWORD: ${{secrets.EFFIZIENTE_NORMAL_PASSWORD}}
  EFFIZIENTE_ADMIN_USER: ${{secrets.EFFIZIENTE_ADMIN_USER}}
  EFFIZIENTE_ADMIN_PASSWORD: ${{secrets.EFFIZIENTE_ADMIN_PASSWORD}}
  LT_USERNAME: ${{secrets.LT_USERNAME}}
  LT_ACCESS_KEY: ${{secrets.LT_ACCESS_KEY}}
  ZEROSTEP_TOKEN: ${{secrets.ZEROSTEP_TOKEN}}
  PLAYWRIGHT_SERVICE_ACCESS_TOKEN: ${{ secrets.PLAYWRIGHT_SERVICE_ACCESS_TOKEN }}
  PLAYWRIGHT_SERVICE_URL: ${{ secrets.PLAYWRIGHT_SERVICE_URL }}
  PLAYWRIGHT_SERVICE_RUN_ID: ${{ github.run_id }}-${{ github.run_attempt }}-${{ github.sha }}
  WEBDRIVERIO_SHOP: ${{vars.WEBDRIVERIO_SHOP}}
jobs:
  build-js:
    runs-on: ubuntu-latest
    steps:
      - uses: qase-tms/qase-link-run@main
        env:
          QASE_API_TOKEN: ${{ env.QASE_API_TOKEN }}
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4

      - name: Get installed Playwright version
        id: playwright-version
        run: echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package-lock.json').dependencies['@playwright/test'].version)")" >> $GITHUB_ENV

      - name: Cache playwright binaries
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}

      - name: Install dependencies
        run: |
          npm ci

      - run: npx playwright install --with-deps
        if: steps.playwright-cache.outputs.cache-hit != 'true'
      - name: Run Playwright tests
        run: npx playwright test
