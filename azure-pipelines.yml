schedules:
  - cron: "0 12 * * *"
    displayName: "Daily at 7 AM Central Time"
    branches:
      include:
        - main
    always: "true"

pool:
  vmImage: "ubuntu-latest"

jobs:
- job: playwright_tests
  displayName: 'Run Playwright Tests'
  strategy:
    matrix:
      shard-1:
        shardIndex: 1
      shard-2:
        shardIndex: 2

  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: ">=20.0.0"
    displayName: "Install Node.js>20"

  - script: |
      npm ci
    displayName: "Install dependencies"

  - script: |
      npx playwright install --with-deps
    displayName: "Install Playwright Browsers"

  - bash: curl -fsSL https://github.com/allure-framework/allurectl/releases/latest/download/allurectl_linux_amd64 -o allurectl && chmod +x allurectl
    displayName: Download allurectl

  - script: |
      npm install -g allure-commandline  
    displayName: "Install Allure"

 # - script: ./allurectl watch -- npx playwright test --shard=$(shardIndex)/2 --reporter=blob,junit
  - script: npx playwright test --shard=$(shardIndex)/2 
    displayName: "Run Playwright tests"
    env:
      ADO_TOKEN: $(ADO_TOKEN)
      ALLURE_ENDPOINT: https://effiziente.testops.cloud
      ALLURE_PROJECT_ID: 1
      ALLURE_RESULTS: allure-results
      ALLURE_TOKEN: $(ALLURE_TOKEN)
      LT_ACCESS_KEY: $(LT_ACCESS_KEY)

  - script: |
      allure generate --single-file allure-results
    displayName: 'Generate allure report'
    condition: always()

  - task: PublishTestResults@2
    displayName: 'Publish Junit results'
    condition: always()
    inputs:
      testResultsFiles: "results.xml"
      testRunTitle: "Playwright Junit Test Results Part $(shardIndex)"

  - task: PublishBuildArtifacts@1
    displayName: 'Publish HTML Playwright report'
    condition: always()
    inputs:
      PathtoPublish: 'blob-report'
      ArtifactName: 'blob-report-$(shardIndex)'
      publishLocation: "Container"

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Allure report'
    condition: always()
    inputs:
      PathtoPublish: "allure-report"
      ArtifactName: "allure-report"
      publishLocation: "Container"

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Ortoni report'
    condition: always()
    inputs:
      PathtoPublish: "report"
      ArtifactName: "ortoni-report"
      publishLocation: "Container"

  - task: PublishAllureReport@1
    displayName: 'Publish report to the allure report extension'
    condition: always()
    inputs:
      allureVersion: 2.27.0
      testResultsDir: allure-results

- job: merge_reports
  displayName: 'Merge Reports into HTML'
  dependsOn: playwright_tests
  condition: always()

  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - checkout: self
  - task: NodeTool@0
    inputs:
      versionSpec: ">=20.0.0"
    displayName: "Install Node.js>20"

  - script: |
      npm ci
    displayName: 'Install dependencies'

  - task: DownloadPipelineArtifact@2
    inputs:
      artifactName: 'blob-report-1'
      targetPath: 'all-blob-reports'

  - script: ls -la all-blob-reports

  - task: DownloadPipelineArtifact@2
    inputs:
      artifactName: 'blob-report-2'
      targetPath: 'all-blob-reports'

  - script: |
      npx playwright merge-reports --config=playwright.merge.config.ts ./all-blob-reports
    displayName: 'Merge into HTML Report'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish HTML merged report'
    condition: always()
    inputs:
      PathtoPublish: "playwright-report"
      ArtifactName: 'html-report-$(Build.BuildId)-attempt-$(System.JobAttempt)'
      publishLocation: "Container"
