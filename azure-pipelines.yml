pool:
  vmImage: "windows-latest"

steps:
  - task: NodeTool@0
    inputs:
      versionSpec: ">=20.0.0"
    displayName: "Install Node.js>20"

  - script: |
      npm ci
      npx playwright install --with-deps
    displayName: "Install dependencies"

  - script: |
      npm install -g allure-commandline  
    displayName: "Install Allure"

  - script: |
      npx playwright test
    workingDirectory:  $(build.sourcesdirectory)/tests
    displayName: "Run Playwright tests"
    env:
      CI: 'true'
      ADO_TOKEN: $(ADO_TOKEN)

  - script: |
      allure generate --single-file allure-results
    displayName: 'Generate allure report'
    workingDirectory:  $(build.sourcesdirectory)
    condition: always()

  - task: PublishTestResults@2
    displayName: 'Publish test results'
    inputs:
      searchFolder: 'test-results'
      testResultsFormat: 'JUnit'
      testResultsFiles: '$(build.sourcesdirectory)/results.xml'
      mergeTestResults: true
      failTaskOnFailedTests: true
      testRunTitle: 'My End-To-End Tests'
    condition: succeededOrFailed()

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(build.sourcesdirectory)/test-results'
      artifact: playwright-report
      publishLocation: 'pipeline'
    condition: succeededOrFailed()

  # - task: PublishPipelineArtifact@1
  #   inputs:
  #     targetPath: 'allure-results'
  #     artifact: allure-report
  #     publishLocation: 'pipeline'
  #   condition: succeededOrFailed()

  # - task: PublishPipelineArtifact@1
  #   inputs:
  #     targetPath: 'report'
  #     artifact: ortoni-report
  #     publishLocation: 'pipeline'
  #   condition: succeededOrFailed()

  # - task: PublishAllureReport@1
  #   displayName: 'Publish allure report extension'
  #   condition: always()
  #   inputs:
  #     allureVersion: 2.27.0
  #     testResultsDir: allure-results
